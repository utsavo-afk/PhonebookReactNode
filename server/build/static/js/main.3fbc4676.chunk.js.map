{"version":3,"sources":["services/contacts.js","components/ContactForm.js","components/SearchBar.js","components/Contact.js","components/Contacts.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","ContactForm","props","contacts","newName","newNumber","setContacts","setName","setNumber","setAlertMessage","alertMessage","onSubmit","e","preventDefault","_name","_number","newObject","contactObject","name","number","type","message","setTimeout","some","el","window","confirm","contact","find","id","updateNumber","prompt","updatedContact","axios","put","then","res","data","updateContact","map","c","catch","error","response","console","log","post","concat","htmlFor","value","onChange","target","SearchBar","searchString","setSearchString","Contact","deleteContact","delete","delContact","filter","onClick","_","Contacts","length","toLowerCase","includes","Notification","notification","className","App","useState","useEffect","get","fetchedContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fbc4676.chunk.js","sourcesContent":["import axios from 'axios'\n// const baseUrl = `http://localhost:3001/api/contacts`\nconst baseUrl = `/api/contacts`\n\n// get all contacts\nexport const getAll = () => {\n    const req = axios.get(`${baseUrl}`)\n    return req.then(res => res.data)\n}\n\n// create a contact\nexport const createContact = (newObject) => {\n    const req = axios.post(`${baseUrl}`, newObject)\n    return req.then(res => res.data)\n}\n\n// update a contact\nexport const updateContact = (id, newObject) => {\n    const req = axios.put(`${baseUrl}/${id}`, newObject)\n    return req.then(res => res.data)\n}\n\n// delete a contact\nexport const delContact = (id) => {\n    const req = axios.delete(`${baseUrl}/${id}`)\n    return req.then(() => console.log('contact deleted'))\n}","import React from 'react';\nimport { createContact, updateContact } from '../services/contacts';\n\n\nconst ContactForm = (props) => {\n    const {\n        contacts,\n        newName,\n        newNumber,\n        setContacts,\n        setName,\n        setNumber,\n        setAlertMessage,\n        alertMessage\n    } = props\n\n    const checkDuplicate = (arr, _name, _number) => {\n        return arr.some(el => el.name === _name || el.number === _number)\n    }\n\n\n    const addContact = (e) => {\n        e.preventDefault()\n        const contactObject = {\n            name: newName,\n            number: newNumber,\n        }\n        const { name, number } = contactObject\n        if (name === '' || number === '') {\n            setAlertMessage({ ...alertMessage, type: 'error', message: 'Name/Number cannot be blank!' })\n            setTimeout(() => setAlertMessage({ ...alertMessage, message: \"\" }), 2000)\n            return\n        }\n        if (checkDuplicate(contacts, name, number)) {\n            if (window.confirm(`Update ${name}'s contact?`)) {\n                const contact = contacts.find(contact => contact.name === name)\n                const { id } = contact\n                const updateNumber = window.prompt(`Enter new number`)\n                const updatedContact = { ...contact, number: updateNumber }\n                return updateContact(id, updatedContact)\n                    // .then(res => setContacts(contacts.map(c => c.id !== id ? c : res)))\n                    .then(res => {\n                        setContacts(contacts.map(c => c.id !== id ? c : res))\n                        setAlertMessage({ ...alertMessage, type: 'success', message: `${name}'s contact was updated` })\n                        setTimeout(() => setAlertMessage({ ...alertMessage, message: \"\" }), 2000)\n                    })\n                    .catch(error => {\n                        setAlertMessage({ ...alertMessage, type: 'error', message: error.response.data.error })\n                        setTimeout(() => setAlertMessage({ ...alertMessage, message: \"\" }), 2000)\n                        // setContacts(contacts.filter(c => c.name !== name))\n                    })\n            } else {\n                console.log('update cancelled');\n            }\n            setName('')\n            setNumber('')\n        }\n        return createContact(contactObject)\n            .then(res => {\n                setContacts(contacts.concat(res))\n                setAlertMessage({ ...alertMessage, type: 'success', message: `${res.name} was added to contacts` })\n                setTimeout(() => setAlertMessage({ ...alertMessage, message: \"\" }), 2000)\n            })\n            .catch(error => {\n                console.log('contact addition failed!')\n                setAlertMessage({ ...alertMessage, type: 'error', message: error.response.data.error })\n                setTimeout(() => setAlertMessage({ ...alertMessage, message: \"\" }), 2000)\n            })\n    }\n\n\n    return (\n        <div>\n            <h2>Contact Form</h2>\n            <form onSubmit={addContact}>\n                <div>\n                    <label htmlFor=\"name\">name </label>\n                    <input name=\"contact_name\" id=\"name\" value={newName} onChange={(e) => setName(e.target.value)} />\n                </div>\n                <div>\n                    <label htmlFor=\"number\">number </label>\n                    <input name=\"contact_number\" id=\"number\" value={newNumber} onChange={(e) => setNumber(e.target.value)} />\n                </div>\n                <button type=\"submit\">add</button>\n            </form>\n        </div>\n    );\n}\n\nexport default ContactForm;\n","import React from 'react';\n\nconst SearchBar = (props) => {\n    const {\n        searchString,\n        setSearchString\n    } = props\n\n    const newSearch = (e) => setSearchString(e.target.value)\n\n    return (\n        <div>\n            <form>\n                <label htmlFor=\"search\">search </label>\n                <input type=\"search\" id=\"search\" name=\"searchBar\" value={searchString} onChange={newSearch} />\n            </form>\n        </div>\n    );\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport { delContact } from '../services/contacts'\n\nconst Contact = (props) => {\n    const {\n        name,\n        number,\n        id,\n        contacts,\n        setContacts,\n        setAlertMessage,\n        alertMessage\n    } = props\n\n    const deleteContact = (id) => {\n        if (window.confirm(`Delete ${name} ?`)) {\n            return delContact(id)\n                .then(() => setContacts(contacts.filter(c => c.id !== id)))\n                .then(() => {\n                    setAlertMessage({ ...alertMessage, type: 'success', message: `${name} deleted successfully` })\n                    setTimeout(() => setAlertMessage({ ...alertMessage, message: '' }), 2000)\n                })\n                .catch(error => {\n                    setAlertMessage({ ...alertMessage, type: 'success', message: error.res.data })\n                    setTimeout(() => setAlertMessage({ ...alertMessage, message: '' }), 2000)\n                })\n        }\n        return console.log('cancelled delete operation');\n    }\n\n    return (\n        <li>\n            <span>{name} {number}</span> <button onClick={(_) => deleteContact(id)}>delete</button>\n        </li>\n    );\n}\n\nexport default Contact;\n","import React from 'react';\nimport SearchBar from './SearchBar'\nimport Contact from './Contact'\n\n\n\nconst Contacts = (props) => {\n    const { contacts, setContacts } = props\n    const { searchString, setSearchString } = props\n    const { alertMessage, setAlertMessage } = props\n\n    if (contacts.length === 0) {\n        return (\n            <div>\n                <h2>Contacts</h2>\n                <p>There are no contacts</p>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <h2>Contacts</h2>\n            <SearchBar searchString={searchString} setSearchString={setSearchString} />\n            <ul>\n                {\n                    searchString\n                        ? (\n                            contacts.filter(contact => contact.name.toLowerCase().includes(searchString.toLowerCase()))\n                                .map(contact => <Contact key={contact.id} name={contact.name} number={contact.number} contacts={contacts} alertMessage={alertMessage} setAlertMessage={setAlertMessage} />)\n                        )\n                        : contacts.map(contact => <Contact key={contact.id} contacts={contacts} setContacts={setContacts} id={contact.id} name={contact.name} number={contact.number} alertMessage={alertMessage} setAlertMessage={setAlertMessage} />)\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default Contacts;\n","import React from 'react';\n\nconst Notification = (props) => {\n    const { notification } = props\n\n    if (notification.message === \"\") {\n        return null\n    }\n\n    if (notification.message && notification.type === 'success') {\n        return (\n            <div className=\"success\">\n                {notification.message}\n            </div>\n        )\n    }\n\n    if (notification.message && notification.type === 'error') {\n        return (\n            <div className=\"error\">\n                {notification.message}\n            </div>\n        )\n    }\n}\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react'\nimport ContactForm from './components/ContactForm'\nimport Contacts from './components/Contacts'\nimport Notification from './components/Notification'\nimport { getAll } from './services/contacts'\n\n\nconst App = () => {\n    const [contacts, setContacts] = useState([])\n\n    useEffect(() => {\n        getAll()\n            .then(fetchedContacts => setContacts(fetchedContacts))\n            .catch(() => console.log('failed to fetch data'))\n    }, [])\n\n    const [newNumber, setNumber] = useState('add number...')\n    const [newName, setName] = useState('add name...')\n    const [searchString, setSearchString] = useState('')\n    const [alertMessage, setAlertMessage] = useState({\n        type: '',\n        message: ''\n    })\n    return (\n        <div>\n            <h1>phonebook</h1>\n\n            <Notification notification={alertMessage} />\n\n            <Contacts\n                contacts={contacts}\n                searchString={searchString}\n                setSearchString={setSearchString}\n                setContacts={setContacts}\n                setAlertMessage={setAlertMessage}\n                alertMessage={alertMessage}\n            />\n\n            <ContactForm\n                contacts={contacts}\n                setContacts={setContacts}\n                newNumber={newNumber}\n                setNumber={setNumber}\n                newName={newName}\n                setName={setName}\n                setAlertMessage={setAlertMessage}\n                alertMessage={alertMessage}\n            />\n        </div>\n    )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nReactDOM.render(\n    <App />, document.getElementById('root')\n)"],"sourceRoot":""}